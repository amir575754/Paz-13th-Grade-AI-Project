package com.apps.paz.bullseye;

import com.apps.paz.bullseye.enums.ColorEnum;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class GameUtil { //The utilities (functions and variables) the user needs to play the game.

    public static final int GAME_HEIGHT = 10; //The amount of rows in the main screen. Also the amount of guesses the user and the AI have.
    public static final int GAME_WIDTH = 4; //The amount of colors in each code. Also the amount of digits allowed in a code.
    public static Node<ColorEnum> colorChain = new Node<>(ColorEnum.Pink); //A circular linked list which helps to know what is the next color in the color chain.
    public static Integer[] answer = new Integer[4]; //An integer array which contains the digits of the code the user has to guess.
    public static ArrayList<String> instructionsList = new ArrayList<>(); //An arrayList of instructions in which, each element contains a certain part of the game's instructions.
    public static int currentInstructionIndex = 0; //The current index of the instruction shown right now. At default it's 0.

    public static void initInstructions() {
        //Input: None
        //Output: Initializes the instructions arrayList.

        instructionsList.add("In the game Bullseye, you need to guess a sequence of 4 different colors, randomly generated by the computer.");
        instructionsList.add("At the same time the computer has to guess another sequence of 4 colors chosen by you at the start of the game.");
        instructionsList.add("Both you and the computer will have 10 guesses. After each guess you make, the computer will make one.");
        instructionsList.add("Each guess you make will be graded in the range 0-40.");
        instructionsList.add("The grade is divided into two digits:\n" +
                "The tens digit represents the amount of colors you chose correctly and put in the correct position.\n" +
                "The units digit represents the amount of colors you chose correctly, but put in the wrong position.\n");
        instructionsList.add("Use the grade you got on your previous guess to optimize your next guess.");
    }

    public static Integer translateColorToNumber(ColorEnum color) {
        //Input: a color enum representing a certain digit in a code.
        //Output: a digit corresponding with color received.

        if(color == null) {
            return 0;
        } else {
            switch(color){
                case Pink:
                    return 1;
                case Red:
                    return 2;
                case Green:
                    return 3;
                case Blue:
                    return 4;
                case Orange:
                    return 5;
                case Yellow:
                    return 6;
            }
        }

        return 0;
    }

    public static Integer[] translateGuessToNumberArray(ColorEnum[] userGuess) {
        //Input: a colorEnum array representing the user's guess.
        //Output: a integer array representing the user's guess.

        Integer[] userGuessNumbers = new Integer[4]; //Create a new integer array to represent the user's guess.
        for (int i = 0; i < userGuessNumbers.length; i++) { //Loop over the new array
            userGuessNumbers[i] = translateColorToNumber(userGuess[i]); //Translate each color of the original array to a number and put in the new array.
        }
        return userGuessNumbers; //Return the new array.
    }

    public static void initColorChain() {
        //Input: None
        //Output: Initializes the circular linked list of the colors.

        //Pink --> Red --> Green --> Blue --> Orange --> Yellow --> the start of the linked list.

        Node<ColorEnum> temp = colorChain;
        temp.setNext(new Node<ColorEnum>(ColorEnum.Red));
        temp = temp.getNext();
        temp.setNext(new Node<ColorEnum>(ColorEnum.Green));
        temp = temp.getNext();
        temp.setNext(new Node<ColorEnum>(ColorEnum.Blue));
        temp = temp.getNext();
        temp.setNext(new Node<ColorEnum>(ColorEnum.Orange));
        temp = temp.getNext();
        temp.setNext(new Node<ColorEnum>(ColorEnum.Yellow));
        temp = temp.getNext();
        temp.setNext(colorChain);
    }

    public static ColorEnum getNextColor(ColorEnum currentColor) {
        //Input: The current color of the button pressed
        //Output: The next color of the button pressed
        if (currentColor == null) { //If the current color is null, which means the button was pressed for the first time.
            return ColorEnum.Pink; //Return the color pink, as the button's current color.
        }

        Node<ColorEnum> temp = colorChain; //In order to loop over a linked list you must define temp which points to the head of the list.
        ColorEnum nextColor = null; //A colorEnum initialized with null which will contain the new color for the button pressed.
        while (nextColor == null) { //While the next color for the button hasn't been found.
            if (temp.getValue() == currentColor) { // If the current node's value equals to the current color of the button pressed.
                return temp.getNext().getValue(); //Return the node's next node's value - the next color the button is supposed to have.
            }
            temp = temp.getNext(); //Move on to the next node.
        }
        return null; //In order to prevent "Missing return statement" error
    }

    public static ColorEnum[] getColorArray(ColorEnum color1, ColorEnum color2, ColorEnum color3, ColorEnum color4) {
        //Input: Receives four ColorEnums.
        //Output: Constructs an array containing the colorEnums received and returns the array.
        ColorEnum[] colorArray = {color1, color2, color3, color4};
        return colorArray;
    }

    public static int getGuessGrade(Integer[] userGuess) {
        //Input: Receives an array containing the user's guess.
        //Output: returns a a grade for the guess.

        GameResult gameResult = new GameResult(); //Initialize a new GameResult object.


        for (int i = 0; i < userGuess.length; i++) { //Loop over the user guess array.
            int result = checkColor(userGuess[i], i); //Check if the current digit of the user guess is Bang On, Hit or nothing.
            if (result == 2) { //Bang On
                gameResult.addBangOn(); //Add to the GameResult object a new bang on.
            } else if (result == 1) { //Hit
                gameResult.addHits(); //Add to the GameResult object a new hit.
            }
        }
        return gameResult.getBangOn() * 10 + gameResult.getHits(); //Calculate the grade for the user guess and return it.
    }

    private static int checkColor(Integer color, int index) {
        //Input: receives a digit of the user's guess code and the index of that digit in the userGuess array;
        //Output: returns 0 if the color doesn't exist in the answer, 1 if the color exists in the wrong index, 2 if the color exists in the correct index.
        for (int i = 0; i < answer.length; i++) { //Loop over the answer code's array
            if (answer[i] == color) { //If the userGuess code's digit received is in the answer code's array
                if (i == index) { //If the digit is in the same index as the index received - Bang On.
                    return 2;
                } else { //If the digit exists in the answer array but not in the index received - Hit.
                    return 1;
                }
            }
        }
        return 0;
    }
}
